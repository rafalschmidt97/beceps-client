@page "/workouts/details/{workoutIndex:int}"
@using Beceps.Shared.Components.Header;
@using Beceps.Workouts;
@using Beceps.Shared.Domain;
@using Beceps.Shared.Services;
@inject NavigationManager LocalNavigationManager
@inject WorkoutState WorkoutState
@inject HttpClient Http

<Header Title=@($"{Workout.Name}") Icon="fa-edit" IconText="Edit" />

@foreach (var routine in Workout.Routines.Select((value, i) => new { i, value }))
{
    <div class="container mt-4">
        <a class="list-group-item h3" data-toggle="collapse" href=@($"#routine{routine.value.Id}") @onclick="() => Toggle(routine.i)">
            <i class="@IconStyles[routine.i]" />
            @routine.value.WeekDay @routine.value.Name
        </a>
        <div class="list-group collapse" id=@($"routine{routine.value.Id}")>
            @foreach (var set in routine.value.Sets)
            {
                <a class="list-group-item">@set.Name, @set.SetsAmount sets of @set.RepsAmount reps</a>
            }
        </div>
    </div>
}


<div class="btn-group w-100 fixed-bottom" role="group" aria-label="Add or Continue">
    <div class="half">
        <button class="btn btn-xlg btn-warning w-100">History</button>
    </div>
    <div class="half">
        <button type="submit" class="btn btn-xlg btn-primary w-100" @onclick="Continue">Continue</button>
    </div>
</div>

@code {
    [Parameter]
    public int WorkoutIndex { get; set; }
    public WorkoutDto Workout { get; set; }
    public List<string> IconStyles = new List<string>();
    public string IconStyle { get; set; } = "fas fa-arrow-right";

    protected override void OnInitialized()
    {
        Workout = WorkoutState.Workouts.ElementAt(WorkoutIndex);
        foreach (var routine in Workout.Routines)
        {
            IconStyles.Add("fas fa-arrow-right");
        }
    }

    public void Toggle(int iconStyleIndex)
    {
        if (IconStyles[iconStyleIndex] == "fas fa-arrow-right")
        {
            IconStyles[iconStyleIndex] = "fas fa-arrow-left";
        }
        else
        {
            IconStyles[iconStyleIndex] = "fas fa-arrow-right";
        }
    }

    public async Task Continue()
    {
        var exerciseResponse = await Http.Get<IList<ExerciseResponse>>("exercises/today");
        var exercise = exerciseResponse.FirstOrDefault();

        if (exercise != null)
        {
            var workoutIndex = exercise.Id - 1;
            var routineIndex = exercise.Routine.Id - 1;
            LocalNavigationManager.NavigateTo($"/workout/{workoutIndex}/routine/{routineIndex}");
        }
    }
}
